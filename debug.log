roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{kustomization.tpl 0xc0001d0ea0 0xc000157a80  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: argo-events

resources:
  - namespace.yaml
  - install.yaml
  - install-validating-webhook.yaml

commonLabels:
  pavedroad.env: staging

commonAnnotations:
  pavedroad.kustomize.base: eventbridge/manifests/kubernetes/stag
  pavedroad.kustomize.bases: argo-events

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{namespace.tpl 0xc0001d1560 0xc000157d00  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: v1
kind: Namespace
metadata:
  name: argo-events

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{install.tpl 0xc0001d1e60 0xc000157e00  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: eventbus.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: EventBus
    listKind: EventBusList
    plural: eventbus
    shortNames:
    - eb
    singular: eventbus
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: eventsources.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: EventSource
    listKind: EventSourceList
    plural: eventsources
    shortNames:
    - es
    singular: eventsource
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: sensors.argoproj.io
spec:
  group: argoproj.io
  names:
    kind: Sensor
    listKind: SensorList
    plural: sensors
    shortNames:
    - sn
    singular: sensor
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        properties:
          apiVersion:
            type: string
          kind:
            type: string
          metadata:
            type: object
          spec:
            type: object
            x-kubernetes-preserve-unknown-fields: true
          status:
            type: object
            x-kubernetes-preserve-unknown-fields: true
        required:
        - metadata
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-events-sa
  namespace: argo-events
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
  name: argo-events-aggregate-to-admin
rules:
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
  name: argo-events-aggregate-to-edit
rules:
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    rbac.authorization.k8s.io/aggregate-to-view: "true"
  name: argo-events-aggregate-to-view
rules:
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-events-role
rules:
- apiGroups:
  - argoproj.io
  resources:
  - sensors
  - sensors/finalizers
  - sensors/status
  - eventsources
  - eventsources/finalizers
  - eventsources/status
  - eventbus
  - eventbus/finalizers
  - eventbus/status
  verbs:
  - create
  - delete
  - deletecollection
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - configmaps
  - secrets
  - services
  - persistentvolumeclaims
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
- apiGroups:
  - apps
  resources:
  - deployments
  - statefulsets
  verbs:
  - create
  - get
  - list
  - watch
  - update
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-events-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-events-role
subjects:
- kind: ServiceAccount
  name: argo-events-sa
  namespace: argo-events
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eventbus-controller
  namespace: argo-events
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eventbus-controller
  template:
    metadata:
      labels:
        app: eventbus-controller
    spec:
      containers:
      - args:
        - eventbus-controller
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NATS_STREAMING_IMAGE
          value: nats-streaming:0.17.0
        - name: NATS_METRICS_EXPORTER_IMAGE
          value: synadia/prometheus-nats-exporter:0.6.2
        image: quay.io/argoproj/argo-events:v1.4.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        name: eventbus-controller
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
      securityContext:
        runAsNonRoot: true
        runAsUser: 9731
      serviceAccountName: argo-events-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eventsource-controller
  namespace: argo-events
spec:
  replicas: 1
  selector:
    matchLabels:
      app: eventsource-controller
  template:
    metadata:
      labels:
        app: eventsource-controller
    spec:
      containers:
      - args:
        - eventsource-controller
        env:
        - name: EVENTSOURCE_IMAGE
          value: quay.io/argoproj/argo-events:v1.4.0
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/argoproj/argo-events:v1.4.0
        imagePullPolicy: Always
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        name: eventsource-controller
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
      securityContext:
        runAsNonRoot: true
        runAsUser: 9731
      serviceAccountName: argo-events-sa
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sensor-controller
  namespace: argo-events
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sensor-controller
  template:
    metadata:
      labels:
        app: sensor-controller
    spec:
      containers:
      - args:
        - sensor-controller
        env:
        - name: SENSOR_IMAGE
          value: quay.io/argoproj/argo-events:v1.4.0
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/argoproj/argo-events:v1.4.0
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
        name: sensor-controller
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 3
          periodSeconds: 3
      securityContext:
        runAsNonRoot: true
        runAsUser: 9731
      serviceAccountName: argo-events-sa

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{install-validating-webhook.tpl 0xc00029a900 0xc000157f00  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: v1
kind: ServiceAccount
metadata:
  name: argo-events-webhook-sa
  namespace: argo-events
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: argo-events-webhook
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - deployments
  verbs:
  - get
  - list
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - list
  - create
  - update
  - delete
  - patch
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - eventbus
  - eventsources
  - sensors
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: argo-events-webhook-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: argo-events-webhook
subjects:
- kind: ServiceAccount
  name: argo-events-webhook-sa
  namespace: argo-events
---
apiVersion: v1
kind: Service
metadata:
  name: events-webhook
  namespace: argo-events
spec:
  ports:
  - port: 443
    targetPort: 443
  selector:
    app: events-webhook
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: events-webhook
  namespace: argo-events
spec:
  replicas: 1
  selector:
    matchLabels:
      app: events-webhook
  template:
    metadata:
      labels:
        app: events-webhook
    spec:
      containers:
      - args:
        - webhook-service
        env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: quay.io/argoproj/argo-events:v1.4.0
        imagePullPolicy: Always
        name: webhook
      serviceAccountName: argo-events-webhook-sa

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{kustomization-app-stag-aws.tpl 0xc00029b560 0xc000214a80  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization

namespace: pavedroad

bases:
  - eventbridge

resources:
  - namespace.yaml

commonLabels:
  pavedroad.env: stag

commonAnnotations:
  pavedroad.kustomize.base: eventbridge/manifests/kubernetes/stag
  pavedroad.kustomize.bases: "eventbridge"

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{Namespace.tpl 0xc00029be60 0xc000214cc0  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: v1
kind: Namespace
metadata:
  name: pavedroad

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{kustomization-stag-aws.tpl 0xc000149200 0xc000214e40  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
resources:
  - eventbridge-deployment-stag-aws.yaml
  - eventbridge-service-stag-aws.yaml

commonLabels:
  pavedroad.service: eventbridge
  pavedroad.env: stag

commonAnnotations:
  pavedroad.roadctl.version: alphav1
  pavedroad.roadctl.web: www.pavedroad.io
  pavedroad.roadctl.support: support@pavedroad.io

configMapGenerator:
- name: eventbridge-configmap
  literals:
  - ip=0.0.0.0
  - port=8081
  - prlog-auto-init=true
  - prlog-conf-type=env
  - prlog-enable-kafka=true
  - prlog-file-format=text
  - prlog-file-location=logs/eventbridge.log"
  - prlog-kafka-brokers=kafka:9092


roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{template-deployment-stag-aws.tpl 0xc0004aa5a0 0xc000072100  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eventbridge
spec:
  replicas: 3
  strategy: {}
  selector:
    matchLabels:
      pavedroad.service: eventbridge
  template:
    metadata:
      creationTimestamp: null
      labels:
        pavedroad.service: eventbridge
    spec:
      containers:
      - image: 400276217548.dkr.ecr.us-west-1.amazonaws.com/io.pavedroad.stagging/eventbridge
        env:
        - name: HTTP_IP_ADDR
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: ip
        - name: HTTP_IP_PORT
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: port
        - name: PRLOG_AUTOINIT
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: prlog-auto-init
        - name: PRLOG_CFGTYPE
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: prlog-conf-type
        - name: PRLOG_ENABLEKAFKA
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: prlog-enable-kafka
        - name: PRLOG_FILEFORMAT
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: prlog-file-format
        - name: PRLOG_FILELOCATION
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: prlog-file-location
        - name: PRKAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: eventbridge-configmap
              key: prlog-kafka-brokers
        name: eventbridge
        ports:
        - containerPort: 8081
        resources: {}
      restartPolicy: Always
status: {}

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{template-service-stag-aws.tpl 0xc0004aac60 0xc000072580  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: v1
kind: Service
metadata:
  name: eventbridge
spec:
  ports:
  - name: "8081"
    port: 8081
    targetPort: 8081
  selector:
    pavedroad.service: eventbridge
  type: NodePort

roadctl: 2021/08/26 12:38:43 blocks.go:330: template  &{skaffold-stag-aws.tpl 0xc0004ab560 0xc000072a40  }
roadctl: 2021/08/26 12:38:43 blocks.go:337: result  
apiVersion: skaffold/v2beta10
kind: Config
build:
  insecureRegistries:
    - localhost:32000
  tagPolicy:
    sha256: {}
  artifacts:
  - image: localhost:32000//eventbridge
    context: .
    custom:
      dependencies:
        paths:
          - "**.go"
deploy:
  kustomize:
    paths:
    - "manifests/kubernetes/dev"
profiles:
  - name: dev-debug
    activation:
    - env: GODEBUG=true
    deploy:
      kustomize:
        paths:
        - "manifests/kubernetes/dev-debug"
  - name: staging
    build:
      artifacts:
      - image: 400276217548.dkr.ecr.us-west-1.amazonaws.com/io.pavedroad.stagging/eventbridge
        context: .
        docker:
          dockerfile: manifests/Dockerfile
    deploy:
      kustomize:
        paths:
        - "manifests/kubernetes/stag"

