{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Micro service for managing a pool of workers\n\nA scheduler go routine writes jobs to be performed to\na dispatcher.  The dispatcher manages and forwards jobs\nto a number N number of workers using a buffered channel.\n\nWorkers read the jobs, perform the tasks, and log the\nresults. The log code, logs to one or more configured\ndestinations.  This can include local file system, stdout,\nor a Kafka topic.\n\nJobs, Scheduler, are both defined as interfaces enabling\nthem to be customized to specific tasks.",
    "title": "eventbridge API.",
    "termsOfService": "there are no TOS at this moment, use at your own risk we take no responsibility",
    "contact": {
      "name": "Support",
      "url": "https://www.pavedroad.io/",
      "email": "support@pavedroad.io"
    },
    "license": {
      "name": "Apache 2"
    },
    "version": "1.0.0"
  },
  "host": "api.pavedroad.io",
  "basePath": "/api/v1/namespace/pavedroad/eventbridge",
  "paths": {
    "/api/v1/namespace/pavedroad/Eventbridge/EventbridgeJobsEndPoint": {
      "post": {
        "description": "Create a new Job",
        "tags": [
          "EventbridgeJobsEndPoint"
        ],
        "operationId": "createJob",
        "responses": {
          "201": {
            "$ref": "#/responses/listJobResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/EventbridgeJobsEndPoint/{key}": {
      "put": {
        "description": "Update a EventbridgeJobsEndPoint specified by key, where key is a uuid",
        "tags": [
          "EventbridgeSchedulerEndPoint"
        ],
        "operationId": "updateJob",
        "responses": {
          "200": {
            "$ref": "#/responses/listJobResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "404": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      },
      "delete": {
        "description": "Delete a job specified by key, which is a uuid",
        "tags": [
          "EventbridgeJobsEndPoint"
        ],
        "operationId": "deleteJobs",
        "responses": {
          "200": {
            "$ref": "#/responses/listJobResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/EventbridgeJobsEndPointLIST": {
      "get": {
        "description": "Returns a list of Jobs",
        "tags": [
          "jobs"
        ],
        "operationId": "listjobs",
        "responses": {
          "200": {
            "$ref": "#/responses/listJobResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/EventbridgeSchedulerEndPoint": {
      "post": {
        "description": "Create a new scheduler",
        "tags": [
          "EventbridgeSchedulerEndPoint"
        ],
        "operationId": "createSchedule",
        "responses": {
          "201": {
            "$ref": "#/responses/genericResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/EventbridgeSchedulerEndPoint/{key}": {
      "put": {
        "description": "Update a EventbridgeSchedulerEndPoint specified by key, where key is a uuid",
        "tags": [
          "EventbridgeSchedulerEndPoint"
        ],
        "operationId": "updateSchedule",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      },
      "delete": {
        "description": "Delete a job specified by key, which is a uuid",
        "tags": [
          "EventbridgeSchedulerEndPoint"
        ],
        "operationId": "deleteSchudler",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/EventbridgeSchedulerEndPointLIST": {
      "get": {
        "description": "Returns a list of schedules",
        "tags": [
          "schedules"
        ],
        "operationId": "listschedule",
        "responses": {
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/jobs/{key}": {
      "get": {
        "description": "Returns a job given a key, where key is a UUID",
        "tags": [
          "job"
        ],
        "operationId": "getjob",
        "responses": {
          "200": {
            "$ref": "#/responses/listJobResponse"
          },
          "404": {
            "$ref": "#/responses/get404Response"
          },
          "500": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/liveness": {
      "get": {
        "description": "Any other status code will cause kubelet to restart the pod.",
        "tags": [
          "liveness"
        ],
        "summary": "A HTTP response status code between 200-400 indicates the pod is alive.",
        "operationId": "getliveness",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "503": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/management": {
      "get": {
        "description": "Returns available management commands",
        "tags": [
          "management"
        ],
        "operationId": "putmanagement",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "400": {
            "$ref": "#/responses/genericError"
          },
          "500": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/metrics": {
      "get": {
        "description": "Returns metrics for eventbridge service\nMetrics should include:\nScheduler\nDispatcher\nWorkers\nJobs",
        "tags": [
          "metrics"
        ],
        "operationId": "getMetrics",
        "responses": {
          "200": {
            "$ref": "#/responses/metricsResponse"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/ready": {
      "get": {
        "description": "Should return a 200 after all pod initialization has completed.",
        "tags": [
          "ready"
        ],
        "summary": "Indicates the pod is ready to start taking traffic.",
        "operationId": "getready",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "503": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    },
    "/api/v1/namespace/pavedroad/Eventbridge/schedule/{key}": {
      "get": {
        "description": "Returns a schedule given a key, where key is a UUID",
        "tags": [
          "schedule"
        ],
        "operationId": "getschedule",
        "responses": {
          "200": {
            "$ref": "#/responses/genericResponse"
          },
          "500": {
            "$ref": "#/responses/genericError"
          },
          "default": {
            "$ref": "#/responses/genericError"
          }
        }
      }
    }
  },
  "definitions": {
    "mgtCommand": {
      "description": "mgtCommand List of available command and field options",
      "type": "object",
      "properties": {
        "command_type": {
          "description": "Go data type",
          "type": "string",
          "x-go-name": "CommandType"
        },
        "data_type": {
          "description": "Go data type",
          "type": "string",
          "x-go-name": "DataType"
        },
        "description": {
          "description": "Description of what this command does",
          "type": "string",
          "x-go-name": "Description"
        },
        "name": {
          "description": "Name of the command",
          "type": "string",
          "x-go-name": "Name"
        }
      },
      "x-go-package": "wpool"
    }
  },
  "responses": {
    "genericError": {
      "description": "genericError",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "x-go-name": "Error"
          }
        }
      }
    },
    "genericResponse": {
      "description": "genericResponse",
      "schema": {
        "type": "object",
        "properties": {
          "json_body": {
            "description": "JSON body",
            "type": "string",
            "x-go-name": "JSONBody"
          }
        }
      }
    },
    "get404Response": {
      "description": "get404Response Not found",
      "schema": {
        "type": "object",
        "properties": {
          "error": {
            "description": "Error message",
            "type": "string",
            "x-go-name": "Error"
          },
          "uuid": {
            "description": "UUID / key that was not found",
            "type": "string",
            "x-go-name": "UUID"
          }
        }
      },
      "headers": {
        "Body": {}
      }
    },
    "listJobResponse": {
      "description": "A []listJobsResponse is a single job but returned as a list",
      "headers": {
        "id": {
          "type": "string",
          "description": "ID: uuid for this job"
        },
        "type": {
          "type": "string",
          "description": "Type: of job the represents"
        },
        "url": {
          "type": "string",
          "description": "URL for this http request"
        }
      }
    },
    "managementGetResponse": {
      "description": "managementGetResponse List of available command and field options",
      "headers": {
        "commands": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/mgtCommand"
          },
          "description": "Commands is a list of valid commands that can be executed"
        },
        "fields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Fields is a list of fields that can be changed"
        }
      }
    },
    "managementRequest": {
      "description": "managementRequest user request to execute a management command",
      "headers": {
        "command": {
          "type": "string",
          "description": "Commands is a list of valid commands that can be executed"
        },
        "field": {
          "type": "string",
          "description": "Field to set"
        },
        "field_value": {
          "type": "integer",
          "format": "int64",
          "description": "Value for field"
        }
      }
    },
    "metricsResponse": {
      "description": "metricsResponse",
      "schema": {
        "type": "object",
        "properties": {
          "dispather_metrics": {
            "type": "string",
            "x-go-name": "DispatherMetrics"
          },
          "scheduler_metrics": {
            "description": "Error message",
            "type": "string",
            "x-go-name": "SchedulerMetrics"
          }
        }
      }
    }
  }
}